<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="THM_HRI/pokerhand" type="0" type_size="1" nature="4" stm_value_name="THM_HRI/pokerhand" inner="1" tooltip="THM_HRI/pokerhand desc" id="4" /><Input name="THM_HRI/karten_austauschen" type="0" type_size="1" nature="4" stm_value_name="THM_HRI/karten_austauschen" inner="1" tooltip="THM_HRI/karten_austauschen desc" id="5" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Show App" id="2" localization="8" tooltip="Loads the application on the tablet, if it exists, and displays the webview.&#x0A;&#x0A;V1.0.0&#x0A;" x="217" y="78"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[

class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.isRunning = False

    def onUnload(self):
        self.isRunning = False

    def _getTabletService(self):
        tabletService = None
        try:
            tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return tabletService

    def onInput_onStart(self):
        if self.isRunning:
            return # already running, nothing to do
        self.isRunning = True
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        tabletService = self._getTabletService()
        appName = self.packageUid()
        state = False
        if appName:
            if tabletService:
                if tabletService.loadApplication(appName):
                    self.logger.info("Successfully set application: %s" % appName)
                    tabletService.showWebview()
                    state = True
                else:
                    self.logger.warning("Got tablet service, but failed to set application: %s" % appName)
            else:
                self.logger.warning("Couldn't find tablet service, so can't set application: %s" % appName)
        if state:
            self.onSuccess()
        else:
            self.onFailure()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished successfully." id="3" /><Output name="onFailure" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished unsuccessfully." id="4" /></Box><Box name="VideoPoker" id="3" localization="8" tooltip="" x="307" y="318"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[
from collections import Counter
import random

class Karte:
    werte = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'Bube', 'Dame', 'Koenig', 'Ass']
    farben = ['Herz', 'Karo', 'Pik', 'Kreuz']
    kartenwerte = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10,
                   'Bube': 11, 'Dame': 12, 'Koenig': 13, 'Ass': 14}

    def __init__(self, wert, farbe):
        self.wert = wert
        self.farbe = farbe
        self.punktwert = self.kartenwerte[wert]

    def __repr__(self):
        return str(self.wert) + " von " + str(self.farbe)

class Deck:
    def __init__(self):
        self.karten = [Karte(wert, farbe) for wert in Karte.werte for farbe in Karte.farben]
        self.mischen()

    def mischen(self):
        random.shuffle(self.karten)

    def karte_ziehen(self):
        return self.karten.pop()

# Hilfsfunktionen für Handbewertungen
def ist_flush(hand):
    farben = [karte.farbe for karte in hand]
    return len(set(farben)) == 1

def ist_straight(hand):
    werte = sorted([karte.punktwert for karte in hand])
    for i in range(len(werte) - 1):
        if werte[i] + 1 != werte[i + 1]:
            return False
    return True

def hand_typ_bestimmen(hand):
    werte_hand = [karte.punktwert for karte in hand]
    wert_zaehlung = Counter(werte_hand)
#    return [werte_hand, wert_zaehlung]

    zaehlung_werte = list(wert_zaehlung.values())
#    zaehlung_werte = [wert_zaehlung[key] for key in wert_zaehlung.keys()]
#    zaehlung_werte = werte_hand
    istFlush = ist_flush(hand)
    istStraight = ist_straight(hand)

    if istFlush and istStraight and max(werte_hand) == Karte.kartenwerte['Ass']:
        return 'Royal Flush'
    elif istFlush and istStraight:
        return 'Straight Flush'
    elif 4 in zaehlung_werte:
        return 'Vier Gleiche'
    elif sorted(zaehlung_werte) == [2, 3]:
        return 'Full House'
    elif istFlush:
        return 'Flush'
    elif istStraight:
        return 'Strasse'
    elif 3 in zaehlung_werte:
        return 'Drei Gleiche'
    elif zaehlung_werte.count(2) == 2:
        return 'Zwei Paare'
    elif zaehlung_werte.count(2) == 1 and any(wert >= 11 for wert in werte_hand if wert_zaehlung[wert] == 2):
        return 'Ein Paar (Buben oder Höher)'
    else:
        return 'Verloren'

# Gewinnausschüttung
gewinn_faktoren = {
    'Royal Flush': 800,
    'Straight Flush': 60,
    'Vier Gleiche': 22,
    'Full House': 9,
    'Flush': 6,
    'Strasse': 4,
    'Drei Gleiche': 3,
    'Zwei Paare': 2,
    'Ein Paar (Buben oder Höher)': 1,
    'Verloren': 0
}

def gewinn_berechnen(hand_typ, einsatz):
    return einsatz * gewinn_faktoren[hand_typ]

# Beispiel für die Verwendung
guthaben = 1000  # Startguthaben
einsatz = 10  # Einsatz des Spielers


def karten_austauschen(hand, deck, austausch_indexe):
    if austausch_indexe:
        for index in austausch_indexe:
            hand[index] = deck.karte_ziehen()
    return hand


class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.memory = self.session().service("ALMemory")
        self.tts = self.session().service("ALTextToSpeech")
        self.pokerhand = []
        self.deck = Deck()
        self.guthaben = 1000

    def onUnload(self):
        #put clean-up code here
        pass

    def Karten_austeilen(self):
        self.pokerhand = []
        self.deck = Deck()
        self.guthaben = self.guthaben - 10
        self.memory.raiseEvent('THM_HRI/poker_guthaben', self.guthaben)
        if(self.guthaben < 0):
            time.sleep(8)
            self.onStopped()
        self.pokerhand = [self.deck.karte_ziehen() for _ in range(5)]  # Ziehe 5 Karten
        self.logger.info(self.pokerhand)
        hand_str = [str(karte) for karte in self.pokerhand]
        self.logger.info(hand_str)
        self.memory.raiseEvent('THM_HRI/pokerhand', hand_str)

    def onInput_onStart(self):
        self.Karten_austeilen()
        #hand = karten_austauschen(hand, deck)
        #handtyp = hand_typ_bestimmen(self.pokerhand)
        #self.logger.info("Dein Gewinn beläuft sich auf " + str(gewinn_berechnen(handtyp,10)))

    def onInput_karten_austauschen(self, auszutauschende_karten):
        self.logger.info(auszutauschende_karten)

        austausch_indexe = []
        for index, x in enumerate(auszutauschende_karten):
            if x == 1:
                austausch_indexe.append(index)
        self.logger.info(austausch_indexe)
        self.pokerhand = karten_austauschen(self.pokerhand, self.deck, austausch_indexe)
        hand_str = [str(karte) for karte in self.pokerhand]
        self.logger.info(hand_str)
        self.memory.raiseEvent('THM_HRI/pokerhand', hand_str)
        time.sleep(2)
        handtyp = hand_typ_bestimmen(self.pokerhand)
        self.logger.info(handtyp)
        gewinn = gewinn_berechnen(handtyp,10)
        self.logger.info(gewinn)
        self.guthaben = self.guthaben + int(gewinn)
        self.Output_Text_Animation(int(gewinn))
        self.memory.raiseEvent('THM_HRI/poker_guthaben', self.guthaben)
        self.memory.raiseEvent('THM_HRI/poker_gewinn', [str(handtyp),str(gewinn)])
        self.Karten_austeilen()
        #self.memory.raiseEvent('THM_HRI/pokerhand', [])




    def onInput_onStop(self):
            self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
            self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="karten_austauschen" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="Output_Text_Animation" type="2" type_size="1" nature="2" inner="0" tooltip="" id="6" /></Box><Box name="Wait" id="6" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="125" y="294"><bitmap>media/images/box/wait.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" /><Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" /><Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="2" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" /><Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" /></Box><Box name="Aussagen + Animationen" id="1" localization="8" tooltip="" x="491" y="385"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import random

class PokerKommentare:
    def __init__(self):
        pass

    def kommentar_gar_nichts(self):
        kommentare = [
            "Das nennt man wohl Pech im Spiel... und Pech in der Liebe.",
            "Hättest du dir lieber eine Schachtel Pralinen gekauft.",
            "Manchmal verliert man und manchmal gewinnen die anderen.",
            "Besser Glück beim nächsten Blatt, vielleicht klappt es dann!",
            "Kein Glück, kein Ruhm... aber auch keine Schande, oder?",
            "Da hat wohl jemand das Memo verpasst, dass heute kein Glückstag ist.",
            "Das Leben ist wie Poker, manchmal bekommt man einfach eine schlechte Hand.",
            "Denk dran, Verlieren ist nur eine Möglichkeit, den Pot nicht zu gewinnen.",
            "Nichts gewonnen, aber auch nichts verloren... außer vielleicht ein paar Nerven.",
            "Poker ist wie das Leben: Manchmal klappt's, manchmal nicht. Heute eher nicht.",
            "Die THM bedankt sich für deine finanzielle Unterstützung",
            "Wow. Du bist ja noch schlechter als NAO!",
            "Verloren. Vielleicht ist Kniffel ja eher was für dich.",
            "Vielen Dank. Von deinem Verlust kauft die THM neue moderne Skulpturen für den Außenbereich",
            "Du hast gerade mehr Punkte verloren als du dieses Semester an Credits gemacht hast",
            "Gewonnen! Kleiner Spaß. Du hast verloren"
        ]
        kommentar = random.choice(kommentare)
        return kommentar

    def animation_gar_nichts(self):
        animationen = [
            "Stand/Negative/Angry_1",
            "Stand/Negative/Angry_2",
            "Stand/Negative/Sad_1",
            "Stand/Negative/Angry_4"
        ]
        animation = random.choice(animationen)
        return animation

    def kommentar_wenig(self):
        kommentare = [
            "Ein kleiner Gewinn ist besser als kein Gewinn, oder?",
            "Sieh's positiv: Dein Geldbeutel ist immerhin nicht leerer geworden!",
            "Ein bisschen Gewinn ist wie ein kleiner Sonnenstrahl an einem bewölkten Tag.",
            "Ein Tropfen im Ozean des Reichtums... aber hey, immerhin ein Tropfen!",
            "Langsam, aber stetig gewinnt das Rennen... oder so ähnlich.",
            "Nicht genug, um reich zu werden, aber genug, um ein Lächeln auf dein Gesicht zu zaubern.",
            "Klein, aber fein. Wie ein Mini-Croissant im großen Bäckerladen des Lebens.",
            "Gewinnen ist wie Zähneputzen: Jeder kleine Sieg zählt!",
            "Ein kleiner Gewinn ist besser als ein großer Verlust... oder?",
            "Gewinnen ist wie eine Tasse Tee an einem kalten Tag: Wärmend, aber nicht überwältigend."
            "Wow. Du bist ein Naturtalent. Du solltest direkt alles auf einmal setzen!"
        ]
        kommentar = random.choice(kommentare)
        return kommentar

    def animation_wenig(self):
        animationen = [
            "Stand/Gestures/Desperate_1",
            "Stand/Gestures/Desperate_5",
            "Stand/Gestures/Desperate_3",
            "Stand/Gestures/Desperate_4"
        ]
        animation = random.choice(animationen)
        return animation

    def kommentar_viel(self):
        kommentare = [
            "Wooohooo! Wer sagt, dass Glücksspiele nicht lohnen?",
            "Besser einen Jackpot gewonnen als gar keinen Pot, oder?",
            "Eine Welle des Glücks hat dich heute wohl erfasst!",
            "Klingeling, die Kasse klingelt! Zeit, den Champagner zu entkorken.",
            "Gewinnen ist großartig, aber so viel zu gewinnen ist einfach episch!",
            "Ich hoffe, du hast schon einen Plan, wie du all das Geld ausgeben wirst!",
            "Wenn das kein Grund zum Feiern ist, weiß ich auch nicht!",
            "Ich glaube, du hast gerade das Poker-Äquivalent zur Lotterie gewonnen!",
            "Mach Platz, Leute, hier kommt der Gewinner des Tages!",
            "Wer braucht schon Glück, wenn man Poker-Skills hat wie du?",
            "Für eine unterentwickelte Lebensform wie den Menschen ist das eine wirklich beachtliche Leistung"
        ]
        kommentar = random.choice(kommentare)
        return kommentar

    def animation_viel(self):
        animationen = [
            "Stand/Emotions/Positive/Hysterical_1",
            "Stand/Emotions/Positive/Happy_1",
            "Stand/Emotions/Positive/Excited_2",
            "Stand/Emotions/Positive/Happy_3"
        ]
        animation = random.choice(animationen)
        return animation

    def kommentar_sehr_viel(self):
        kommentare = [
            "Halleluja! Du hast den heiligen Gral des Pokers gefunden!",
            "Ich hoffe, dein Portemonnaie ist bereit für den Geldregen!",
            "Besser jetzt nicht aufhören, sonst wirst du noch zum Milliardär!",
            "Nimm mich mit auf deine nächste Weltreise, wenn du bitte so freundlich wärst!",
            "Ich weiß nicht, was beeindruckender ist: Deine Poker-Skills oder dein Glück!",
            "Ich würde gerne sagen, dass du zu viel Glück hast, aber ehrlich gesagt gibt es das nicht!",
            "Vergiss den Goldschatz am Ende des Regenbogens, du hast ihn gerade gefunden!",
            "Hörst du das? Das ist der Klang des Geldes, das auf dein Konto fließt!",
            "Ich hoffe, du hast einen Tresor zu Hause, um all das Geld zu verstauen!",
            "Poker-Champion! Ich nehme an, du bist ab jetzt ein VIP am Pokertisch?"
        ]
        kommentar = random.choice(kommentare)
        return kommentar

    def animation_sehr_viel(self):
        animationen = [
            "Stand/Emotions/Positive/Winner_1",
            "Stand/Emotions/Positive/Winner_2",
            "Stand/Gestures/BowShort_2",
            "Stand/Gestures/Salute_1"
        ]
        animation = random.choice(animationen)
        return animation

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tts = self.session().service("ALTextToSpeech")
        self.kommentare = PokerKommentare()
    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        randomnumber = random.random()
        if p == 0:
            if randomnumber < 0.3:
                    self.runAnimation(str(self.kommentare.animation_gar_nichts()))
                    self.tts.say(str(self.kommentare.kommentar_gar_nichts()))
        elif p == 10:
            if randomnumber < 0.5:
                    self.runAnimation(str(self.kommentare.animation_wenig()))
                    self.tts.say(str(self.kommentare.kommentar_wenig()))
        elif p >= 20 and p <= 90:
                    self.runAnimation(str(self.kommentare.animation_viel()))
                    self.tts.say(str(self.kommentare.kommentar_viel()))
        else:
                    self.runAnimation(str(self.kommentare.animation_sehr_viel()))
                    self.tts.say(str(self.kommentare.kommentar_sehr_viel()))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="2" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="runAnimation" type="3" type_size="1" nature="2" inner="0" tooltip="" id="3" /></Box><Box name="Run Behavior" id="4" localization="0" tooltip="Manage a behavior.&#x0A;&#x0A;Will start the behavior given as input when onStart is stimulated.&#x0A;&#x0A;Will stop it when onStop is stimulated.&#x0A;&#x0A;Will exit on onStopped when no error happened during behavior startup or stopping.&#x0A;&#x0A;Will exit on onError if an error happened, transmitting a string describing the error.&#x0A;&#x0A;Most notably (but not exclusively), the box will fail if you try to start a behavior not present on the robot, or if you try to start a behavior that&apos;s already started.&#x0A;" x="654" y="370"><bitmap>media/images/box/box-diagram.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.behaviorName = str()
        self.bm = ALProxy("ALBehaviorManager")

    def onUnload(self):
        if len(self.behaviorName) > 0:
            self.bm.stopBehavior(self.behaviorName)

    def onInput_onStart(self, p):
        if len(self.behaviorName) > 0 and self.behaviorName != p:
            raise RuntimeError("this box is already running another behavior")

        try:
            self.behaviorName = p
            self.bm.runBehavior(self.behaviorName)
        finally:
            self.behaviorName = str()
            self.onStopped()

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" /></Box><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="4" /><Link inputowner="3" indexofinput="4" outputowner="0" indexofoutput="5" /><Link inputowner="1" indexofinput="2" outputowner="3" indexofoutput="6" /><Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="3" /><Link inputowner="0" indexofinput="6" outputowner="3" indexofoutput="5" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>